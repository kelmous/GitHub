#include<iostream>
using namespace std;
const int MAXSIZE=100;
template <class DATATYPE>
class LIST
{
public:
	LIST();
	LIST(DATATYPE a[], int n);
	~LIST();
	int Length();
	DATATYPE Get(int i);
	int Locate(DATATYPE x);
	void insert(int i, DATATYPE x);
	DATATYPE Delete(int i, DATATYPE x);
	void printlist();
private:
	DATATYPE data[MAXSIZE];
	int length;
};
template <class DATATYPE>
LIST<DATATYPE>::LIST()
{
	Length = 0;
}
template <class DATATYPE>
LIST<DATATYPE>::LIST(DATATYPE a[], int n)
{
	if (n<0 || n>MAXSIZE)
	{
		cout << "非法参数" << endl;

	}
	else
	{
		for (int i = 0; i < n; i++)
		{
			data[i] = a[i];
			length = n;
		}
	}
}
template <class DATATYPE>
void LIST<DATATYPE>::insert(int i, DATATYPE x)
{
	if (length >= MAXSIZE)
		cout<< "上溢出" << endl;
	else if (i<1 || i>length + 1)
	{
		cout << "插入位置错误";
	}
	else
	{
		for (int j = length; j >= i; j--)
		{
			data[j] = data[j - 1];
		}
		data[i - 1] = x;
		length++;
	}
}
template <class DATATYPE>
DATATYPE LIST<DATATYPE>::Delete(int i, DATATYPE x)
{
	if (length == 0)
		cout << "下溢出" << endl;
	else if (i<1 || i>MAXSIZE)
	{
		throw << "插入位置错误";
	}
	else
	{   
		x = data[i - 1];
		for (int j = i; j <length; j++)
			data[i-1] = data[i];
		length--;
	}
}
template <class DATATYPE>
DATATYPE LIST<DATATYPE>::Get(int i)
{
	if (i >= 1 && i <= length)
	{
		return data[i - 1];
	}
}
template <class DATATYPE>
int LIST<DATATYPE>::Locate(DATATYPE x)
{
	for (int i = 0; i < length; i++)
	{
		if (data[i] == x)
		{
			return i - 1;
		}
	}
	return 0;
}
template <class DATATYPE>
void LIST<DATATYPE>::printlist()
{
	for (int i = 0; i < length; i++)
	{
		cout << data[i];
	}
}
template <class DATATYPE>
LIST<DATATYPE>::~LIST()
{}
int main()
{
	int a[10] = { 6, 8, 9, 11 };
	LIST<int>list(a, 4);
	list.insert(2, 7);
	list.printlist();
	system("pause");
	return 0;
}